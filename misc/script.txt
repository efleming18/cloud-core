How to Create and Push a message to an Azure Storage Queue
Intro video

It is common to want to be able to use messages, or message queues in your system’s architecture. I’m actively using a queueing system in my day-to-day work, called NServiceBus, which uses the local computer for it’s transport whether that be MSMQ, SQL Transport, or others that NServiceBus supports. I’ve recently come across a scenario where a service outside of my control needed access to the queue. This is where Azure Queue Storage comes in to play.

Azure Queue Storage can be accessed anywhere via authenticated http, or https requests. In these queues, you can store millions of messages to be consumed by some process that runs in your code base to read from the queue, an Azure web role, or an Azure worker role.

Things you'll need:
- Azure Storage Account
(This will be the place where all of the Azure Storage Data objects are stored and be interacted with from the Azure Portal, Azure CLI, or Azure PowerShell )
- From here you'll get your AccountName and AccountKey, which be used for configuring your Azure Connection String.

Setting up a connection string to be used by your code, is a little different in .NET Core.

First we create an AzureStorageSettings class with a single property, *ConnectionString*
(Show the class)

Then we need to set the ConnectionString value to our appsettings.json file, so we can leverage it via the Options pattern.
For this, I've created a "Data" section, with a subsection of "Azure"
The provided value for the ConnectionString can either be for local development, or development with your actual Azure Account

In this example, we are going to develop this locally, but if you wanted to interact with your actual Azure account your connection string would look something like this:

"ConnectionString": "DefaultEndpointsProtocol=https;AccountName=your-azure-account-name;AccountKey=your-azure-account-key"
For now we will set the ConnectionString to: "ConnectionString": "UseDevelopmentStorage=true"
 
Now that we have our appsettings file set up, we need to read these values and use them elsewhere.

In the Startup file  of our web proejct there is a *ConfigureServices* section. In order to inject our AzureStorageSettings to other classes we need to use the new Options pattern which uses custom options/settings classes to represent a group of related settings. 
(Options pattern link: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration#options-config-objects)

First, we'll need to enable the use of the Options pattern with the following line:
services.AddOptions();

Now we can pull the values from the "Azure" subsection of our appsettings file to fill an AzureStorageSettings object 